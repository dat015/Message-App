import 'dart:io' show Platform;
import 'package:flutter/foundation.dart' show kIsWeb;

class Config {
  // ƒê·ªãa ch·ªâ IP c·ªßa m√°y t√≠nh trong m·∫°ng LAN
  static const String localNetworkIP = '192.168.1.23'; // üëà s·ª≠a IP ·ªü ƒë√¢y n·∫øu thay ƒë·ªïi

  static String get baseUrl {
    if (kIsWeb) {
      return 'http://localhost:5053/';
    } else if (Platform.isAndroid) {
      // N·∫øu l√† Android Emulator th√¨ d√πng 10.0.2.2
      // N·∫øu l√† thi·∫øt b·ªã th·∫≠t th√¨ d√πng IP LAN
      return _isPhysicalDevice()
          ? 'http://$localNetworkIP:5053/' // üëà ƒêi·ªán tho·∫°i th·∫≠t
          : 'http://10.0.2.2:5053/';       // üëà Emulator
    } else if (Platform.isWindows) {
      return 'http://localhost:5053/';
    } else {
      return 'http://localhost:5053/';
    }
  }

  static String get redisConnectionString {
    if (kIsWeb) {
      return 'localhost:6379,abortConnect=false';
    } else if (Platform.isAndroid) {
      return _isPhysicalDevice()
          ? '$localNetworkIP:6379,abortConnect=false'
          : '10.0.2.2:6379,abortConnect=false';
    } else {
      return 'localhost:6379,abortConnect=false';
    }
  }
   

  static String get baseUrlWS {
    if (kIsWeb) {
      return 'ws://localhost:5053/ws/chat';
    } else if (Platform.isAndroid) {
      return _isPhysicalDevice()
          ? 'ws://$localNetworkIP:5053/ws/chat'
          : 'ws://10.0.2.2:5053/ws/chat';
    } else {
      return 'ws://localhost:5053/ws/chat';
    }
  }
    static String get baseUrlWSFriend {
    if (kIsWeb) {
      return 'ws://localhost:5053/ws/friend';
    } else if (Platform.isAndroid) {
      return _isPhysicalDevice()
          ? 'ws://$localNetworkIP:5053/ws/friend'
          : 'ws://10.0.2.2:5053/ws/friend'; 
    } else {
      return 'ws://localhost:5053/ws/friend';
    }
  }

  // H√†m t·∫°m ki·ªÉm tra thi·∫øt b·ªã th·∫≠t (physical) hay emulator
  static bool _isPhysicalDevice() {
    // Hi·ªán t·∫°i Flutter kh√¥ng c√≥ c√°ch native 100% x√°c ƒë·ªãnh Android Emulator trong dart:io
    // B·∫°n c√≥ th·ªÉ t·∫°m d√πng bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c `bool.fromEnvironment()` n·∫øu mu·ªën t√πy bi·∫øn
    // Ho·∫∑c c·∫•u h√¨nh th√¥ng qua file .env n·∫øu ph·ª©c t·∫°p h∆°n
    return const bool.fromEnvironment('IS_PHYSICAL_DEVICE', defaultValue: true);
  }
}
